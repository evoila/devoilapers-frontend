/**
 * Operator Automation Backend API
 * Operator Automation Backend API overview.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DtosHTTPErrorDto } from '../model/dtosHTTPErrorDto';
import { DtosServiceInstanceDetailsOverviewDto } from '../model/dtosServiceInstanceDetailsOverviewDto';
import { DtosServiceYamlDto } from '../model/dtosServiceYamlDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ServiceService {

    protected basePath = 'https://127.0.0.1:8080/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Apply a service specific action to a service instance
     * Apply a service specific action to a service instance
     * @param serviceid Id of service
     * @param actioncommand action command
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicesActionServiceidActioncommandPost(serviceid: string, actioncommand: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public servicesActionServiceidActioncommandPost(serviceid: string, actioncommand: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public servicesActionServiceidActioncommandPost(serviceid: string, actioncommand: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public servicesActionServiceidActioncommandPost(serviceid: string, actioncommand: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceid === null || serviceid === undefined) {
            throw new Error('Required parameter serviceid was null or undefined when calling servicesActionServiceidActioncommandPost.');
        }

        if (actioncommand === null || actioncommand === undefined) {
            throw new Error('Required parameter actioncommand was null or undefined when calling servicesActionServiceidActioncommandPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/services/action/${encodeURIComponent(String(serviceid))}/${encodeURIComponent(String(actioncommand))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create service instance from yaml
     * Create an instance of a service from yaml
     * @param serviceyaml Service-Yaml
     * @param servicetype Type of service
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicesCreateServicetypePost(serviceyaml: DtosServiceYamlDto, servicetype: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public servicesCreateServicetypePost(serviceyaml: DtosServiceYamlDto, servicetype: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public servicesCreateServicetypePost(serviceyaml: DtosServiceYamlDto, servicetype: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public servicesCreateServicetypePost(serviceyaml: DtosServiceYamlDto, servicetype: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceyaml === null || serviceyaml === undefined) {
            throw new Error('Required parameter serviceyaml was null or undefined when calling servicesCreateServicetypePost.');
        }

        if (servicetype === null || servicetype === undefined) {
            throw new Error('Required parameter servicetype was null or undefined when calling servicesCreateServicetypePost.');
        }

        let headers = this.defaultHeaders;

        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/services/create/${encodeURIComponent(String(servicetype))}`,
            serviceyaml,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get an overview over all service instances
     * Get an overview over all service instances
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicesInfoGet(observe?: 'body', reportProgress?: boolean): Observable<DtosServiceInstanceDetailsOverviewDto>;
    public servicesInfoGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DtosServiceInstanceDetailsOverviewDto>>;
    public servicesInfoGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DtosServiceInstanceDetailsOverviewDto>>;
    public servicesInfoGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<DtosServiceInstanceDetailsOverviewDto>(`${this.basePath}/services/info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get details over a single service instance
     * Get details over a single service instance
     * @param serviceid Id of service
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicesInfoServiceidGet(serviceid: string, observe?: 'body', reportProgress?: boolean): Observable<DtosServiceInstanceDetailsOverviewDto>;
    public servicesInfoServiceidGet(serviceid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DtosServiceInstanceDetailsOverviewDto>>;
    public servicesInfoServiceidGet(serviceid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DtosServiceInstanceDetailsOverviewDto>>;
    public servicesInfoServiceidGet(serviceid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceid === null || serviceid === undefined) {
            throw new Error('Required parameter serviceid was null or undefined when calling servicesInfoServiceidGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<DtosServiceInstanceDetailsOverviewDto>(`${this.basePath}/services/info/${encodeURIComponent(String(serviceid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a service instance
     * Delete an instance of a service
     * @param serviceid Id of service
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicesServiceidDelete(serviceid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public servicesServiceidDelete(serviceid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public servicesServiceidDelete(serviceid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public servicesServiceidDelete(serviceid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceid === null || serviceid === undefined) {
            throw new Error('Required parameter serviceid was null or undefined when calling servicesServiceidDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/services/${encodeURIComponent(String(serviceid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update service instance from yaml
     * Update an instance of a service from yaml
     * @param serviceyaml Service-Yaml
     * @param serviceid Id of service
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicesUpdateServiceidPost(serviceyaml: DtosServiceYamlDto, serviceid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public servicesUpdateServiceidPost(serviceyaml: DtosServiceYamlDto, serviceid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public servicesUpdateServiceidPost(serviceyaml: DtosServiceYamlDto, serviceid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public servicesUpdateServiceidPost(serviceyaml: DtosServiceYamlDto, serviceid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceyaml === null || serviceyaml === undefined) {
            throw new Error('Required parameter serviceyaml was null or undefined when calling servicesUpdateServiceidPost.');
        }

        if (serviceid === null || serviceid === undefined) {
            throw new Error('Required parameter serviceid was null or undefined when calling servicesUpdateServiceidPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/services/update/${encodeURIComponent(String(serviceid))}`,
            serviceyaml,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the yaml file for an instance
     * Get the yaml file for an specific service instance. Parameter serviceid has to be supplied.
     * @param serviceid Id of service
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public servicesYamlServiceidGet(serviceid: string, observe?: 'body', reportProgress?: boolean): Observable<DtosServiceYamlDto>;
    public servicesYamlServiceidGet(serviceid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DtosServiceYamlDto>>;
    public servicesYamlServiceidGet(serviceid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DtosServiceYamlDto>>;
    public servicesYamlServiceidGet(serviceid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (serviceid === null || serviceid === undefined) {
            throw new Error('Required parameter serviceid was null or undefined when calling servicesYamlServiceidGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (BasicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<DtosServiceYamlDto>(`${this.basePath}/services/yaml/${encodeURIComponent(String(serviceid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
